name: CI/CD using github actions & docker

on:
  push:
    branches:
      - main # main 브랜치에 push될 때 실행
  workflow_dispatch: # 수동 실행 옵션 추가

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # SSH 키 설정을 가장 먼저 수행
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          if ! ssh-keyscan -H ${{ secrets.EC2_HOST }} 2>/dev/null >> ~/.ssh/known_hosts; then
            echo "Failed to scan SSH host keys"
            exit 1
          fi
          ls -la ~/.ssh/id_rsa || echo "SSH key file not found"
          cat ~/.ssh/id_rsa | wc -l || echo "SSH key might be empty"

      - name: Test SSH Connection
        run: |
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

      # 배포 시작 알림
      - name: Notify deployment start
        run: |
          echo "배포 시작: $(date)"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'

      # 테스트 캐시 설정
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
            dist
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Build application
        run: yarn build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/saykotoba-backend:$TIMESTAMP
          DOCKER_LATEST=${{ secrets.DOCKERHUB_USERNAME }}/saykotoba-backend:latest

          docker build -t $DOCKER_IMAGE -t $DOCKER_LATEST .
          docker push $DOCKER_IMAGE
          docker push $DOCKER_LATEST

      - name: Check EC2 Status
        run: |
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            echo "=== CPU Usage ==="
            top -bn1 | grep "Cpu(s)" || true
            echo "=== Memory Usage ==="
            free -m || true
            echo "=== Process List ==="
            ps aux | sort -rn -k 3 | head -5 || true
          EOF

      - name: Pre-deployment Resource Check
        run: |
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            CPU_USAGE=\$(top -bn1 | grep "Cpu(s)" | awk '{print \$2}' | cut -d. -f1)
            MEM_USAGE=\$(free | grep Mem | awk '{print \$3/\$2 * 100.0}' | cut -d. -f1)
            
            if [ "\$CPU_USAGE" -gt 80 ] || [ "\$MEM_USAGE" -gt 80 ]; then
              echo "System resources are too high: CPU \${CPU_USAGE}%, Memory \${MEM_USAGE}%"
              echo "Attempting cleanup..."
              
              # Docker 정리
              docker system prune -af
              
              # 시스템 캐시 정리
              sudo sync && sudo sysctl -w vm.drop_caches=3
              
              # 재확인
              CPU_USAGE=\$(top -bn1 | grep "Cpu(s)" | awk '{print \$2}' | cut -d. -f1)
              if [ "\$CPU_USAGE" -gt 80 ]; then
                echo "System still under heavy load after cleanup"
                exit 1
              fi
            fi
          EOF

      - name: Deploy to EC2
        run: |
          ssh -v -o "StrictHostKeyChecking=no" -o "ServerAliveInterval=60" -o "ServerAliveCountMax=10" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd ~/saykotoba-backend
            git reset --hard
            git pull origin main
            
            if [ ! -f "docker-compose.yml" ]; then
              echo "docker-compose.yml not found!"
              exit 1
            fi
            
            sudo cp /config/env/.env.prod /config/env/.env.prod.backup || true
            
            echo "${{ secrets.ENV_PROD }}" | sudo tee /config/env/.env.prod > /dev/null
            
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/saykotoba-backend:latest
            
            docker system prune -af
            
            if [ "\$(docker ps -q -f name=backend)" ]; then
              docker-compose down
            fi
            
            docker-compose up -d
            
            echo "Checking deployment status..."
            docker ps
            sleep 5
            docker logs backend || true
          EOF

      - name: Health check
        run: |
          sleep 10
          curl --fail http://${{ secrets.EC2_HOST }}:8080/health || exit 1

      - name: Check disk space
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "df -h"

      - name: Check Docker status
        if: always()
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            echo "===== Docker 컨테이너 상태 ====="
            docker ps
            echo "===== Docker 시스템 정보 ====="
            docker system df
            echo "===== 최근 로그 ====="
            docker logs --tail 50 backend
          EOF

      - name: Cleanup
        if: always()
        run: |
          yarn cache clean
          docker system prune -af

      - name: Notify deployment result
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
