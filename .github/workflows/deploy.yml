name: CI/CD using github actions & docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # SSH 키 설정
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | tr -d '\r' | tee ~/.ssh/id_rsa > /dev/null
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          ls -la ~/.ssh/id_rsa || echo "SSH key file not found"
      - name: Test SSH Connection
        run: ssh -q -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

      # 배포 시작 알림
      - name: Notify deployment start
        run: echo "🚀 배포 시작 - $(date)"

      # Node.js & 캐시 설정
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Build application
        run: yarn build

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/saykotoba-backend:$TIMESTAMP
          DOCKER_LATEST=${{ secrets.DOCKERHUB_USERNAME }}/saykotoba-backend:latest
          docker build -t $DOCKER_IMAGE -t $DOCKER_LATEST .
          docker push $DOCKER_IMAGE
          docker push $DOCKER_LATEST

      # EC2 상태 점검
      - name: Check EC2 Status
        run: |
          ssh -q -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "=== CPU Usage ==="
            top -bn1 | grep "Cpu(s)"
            echo "=== Memory Usage ==="
            free -m
            echo "=== Process List ==="
            ps aux --sort=-%mem | head -5
          EOF

      # 서버에 배포 실행
      - name: Deploy to EC2
        run: |
          ssh -v -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
          # 디버깅을 위한 디렉토리 확인
          echo "Checking directories..."
          ls -la /home/$USER/saykotoba-backend/config/

          cd /home/$USER/saykotoba-backend

          # 환경 변수 파일 생성 (echo 한 번에 처리)
          echo "${{ secrets.ENV_PROD }}" > config/env/.env.prod

          # docker-compose 실행 전 환경 변수 확인
          echo "Checking environment variables..."
          cat config/env/.env.prod

          # 최신 이미지 풀 및 컨테이너 재시작
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/saykotoba-backend:latest

          # 기존 컨테이너 정리
          docker-compose down --remove-orphans

          # 컨테이너 시작 전 로그
          echo "Starting container..."
          docker-compose up -d

          # 컨테이너 로그 확인
          echo "Container logs:"
          docker logs backend --tail 50

          # 컨테이너 상태 확인
          echo "Container status:"
          docker ps

          # 헬스체크 전 대기 시간 증가
          echo "Waiting for application to start..."
          sleep 30

          # 헬스체크
          if ! curl -f http://localhost:8080/health; then
            echo "Health check failed!"
            docker logs backend
            exit 1
          fi
          ENDSSH

      # 원격 서버의 헬스체크
      - name: Health check
        run: |
          sleep 10
          curl --fail http://${{ secrets.EC2_HOST }}:8080/health || exit 1

      # 디스크 용량 점검
      - name: Check disk space
        run: ssh -q ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "df -h"

      # Docker 상태 점검
      - name: Check Docker status
        if: always()
        run: |
          ssh -q ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "===== Docker 컨테이너 상태 ====="
            docker ps
            echo "===== Docker 시스템 정보 ====="
            docker system df
          EOF

      # 불필요한 캐시 정리
      - name: Cleanup
        if: always()
        run: |
          yarn cache clean
          docker system prune -af || true

      # 배포 결과 슬랙 알림
      - name: Notify deployment result
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
