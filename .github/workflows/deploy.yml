---
name: CI/CD using github actions & docker
on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch: null
permissions:
  contents: read
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Debug Info
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "Current Branch: ${GITHUB_REF#refs/heads/}"
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh

          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | tr -d '\r' | tee ~/.ssh/id_rsa > /dev/null

          chmod 600 ~/.ssh/id_rsa

          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

          ls -la ~/.ssh/id_rsa || echo "SSH key file not found"
      - name: Test SSH Connection
        run: |
          ssh -q -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{
          secrets.EC2_HOST }} "echo 'SSH connection successful'"
      - name: Notify deployment start
        run: echo "배포 시작 - $(date)"
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)

          BRANCH_NAME=${GITHUB_REF#refs/heads/}

          echo "Building for branch: $BRANCH_NAME"


          if [ "$BRANCH_NAME" = "main" ]; then
            echo "프로덕션 빌드 시작"
            NODE_ENV=production
            DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/saykotoba-backend:$TIMESTAMP
            DOCKER_LATEST=${{ secrets.DOCKERHUB_USERNAME }}/saykotoba-backend:latest
          elif [ "$BRANCH_NAME" = "develop" ]; then
            echo "개발 서버 빌드 시작"
            NODE_ENV=development
            DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/saykotoba-backend:dev-$TIMESTAMP
            DOCKER_LATEST=${{ secrets.DOCKERHUB_USERNAME }}/saykotoba-backend:dev
          else
            echo "Unknown branch: $BRANCH_NAME"
            exit 1
          fi

          docker build --no-cache --build-arg NODE_ENV=$NODE_ENV -t $DOCKER_IMAGE -t $DOCKER_LATEST .

          docker push $DOCKER_IMAGE

          docker push $DOCKER_LATEST
      - name: Deploy to EC2
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "main" ]]; then
            ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
              export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
              cd /home/${{ secrets.EC2_USER }}/saykotoba-backend
              # 현재 실행 중인 컨테이너 확인
              IS_GREEN=$(docker ps | grep "api-green" | grep "Up")

              # Health check 함수 정의
              check_health() {
                local container=$1
                local port=$2
                local max_attempts=30
                local attempt=1
                local delay=5
                
                echo "Health check 시작: $container"
                while [ $attempt -le $max_attempts ]; do
                  echo "Health check 시도 $attempt/$max_attempts..."
                  
                  # curl 명령의 결과 상태 확인을 위한 디버깅 추가
                  docker exec $container curl -s -f http://localhost:$port/swagger > /dev/null
                  local status=$?
                  echo "curl 상태 코드: $status"
                  
                  if [ $status -eq 0 ]; then
                    echo "Health check 성공!"
                    return 0
                  fi
                  
                  attempt=$((attempt+1))
                  sleep $delay
                done
                
                echo "Health check 실패! 최대 시도 횟수 초과"
                return 1
              }

              if [ -z "$IS_GREEN" ]; then
                echo "=== BLUE -> GREEN 전환 ==="
                # Green 배포
                echo "1. Green 이미지 업데이트"
                docker pull '${{ secrets.DOCKERHUB_USERNAME }}'/saykotoba-backend:latest
                echo "2. Green 컨테이너 실행"
                docker-compose up -d --force-recreate api-green
                
                # Health Check 실행
                if check_health api-green 8080; then
                  echo "3. Green 컨테이너 정상 작동 확인"
                  echo "4. Nginx 설정 변경 - Blue에서 Green으로 트래픽 전환"
                  # nginx.conf 파일 수정 - Blue 주석 처리, Green 주석 해제
                  sed -i "s|^\s*server api-blue:8080;|    #server api-blue:8080;|" /home/${{ secrets.EC2_USER }}/saykotoba-backend/config/nginx.conf
                  sed -i "s|^\s*#server api-green:8080;|    server api-green:8080;|" /home/${{ secrets.EC2_USER }}/saykotoba-backend/config/nginx.conf
                  # Nginx 설정 변경 - 컨테이너 내부에서 직접 수정
                  docker-compose exec -T nginx sed -i "s|^\s*server api-blue:8080;|    #server api-blue:8080;|" /etc/nginx/nginx.conf
                  docker-compose exec -T nginx sed -i "s|^\s*#server api-green:8080;|    server api-green:8080;|" /etc/nginx/nginx.conf
                  
                  # 변경 내용 확인
                  echo "Nginx 설정 변경 확인:"
                  grep -A 2 "upstream api-backend" /home/${{ secrets.EC2_USER }}/saykotoba-backend/config/nginx.conf
                  # Nginx 설정 리로드
                  docker-compose exec -T nginx nginx -s reload
                  echo "5. 트래픽 전환 완료: BLUE -> GREEN"
                  
                  # 트래픽 전환 성공 후 이전 환경(Blue) 컨테이너 정지
                  
                  echo "6. 이전 Blue 컨테이너 정지"
                  docker-compose stop api-blue
                  echo "7. Blue-Green 전환 완료"
                else
                  echo "Green 컨테이너 Health Check 실패! 트래픽 전환 취소, 배포 중단"
                  # 롤백 - 실패한 컨테이너 중지
                  docker-compose stop api-green
                  exit 1
                fi
              else
                echo "=== GREEN -> BLUE 전환 ==="
                # Blue 배포
                echo "1. Blue 이미지 업데이트"
                docker pull '${{ secrets.DOCKERHUB_USERNAME }}'/saykotoba-backend:latest
                echo "2. Blue 컨테이너 실행"
                docker-compose up -d --force-recreate api-blue
                
                # Health Check 실행
                if check_health api-blue 8080; then
                  echo "3. Blue 컨테이너 정상 작동 확인"
                  echo "4. Nginx 설정 변경 - Green에서 Blue로 트래픽 전환"
                  # nginx.conf 파일 수정 - Green 주석 처리, Blue 주석 해제
                  sed -i "s|^\s*#server api-blue:8080;|    server api-blue:8080;|" /home/${{ secrets.EC2_USER }}/saykotoba-backend/config/nginx.conf
                  sed -i "s|^\s*server api-green:8080;|    #server api-green:8080;|" /home/${{ secrets.EC2_USER }}/saykotoba-backend/config/nginx.conf
                   # Nginx 설정 변경 - 컨테이너 내부에서 직접 수정
                  docker-compose exec -T nginx sed -i "s|^\s*#server api-blue:8080;|    server api-blue:8080;|" /etc/nginx/nginx.conf
                  docker-compose exec -T nginx sed -i "s|^\s*server api-green:8080;|    #server api-green:8080;|" /etc/nginx/nginx.conf
                
                 
                  # 변경 내용 확인
                  echo "Nginx 설정 변경 확인:"
                  grep -A 2 "upstream api-backend" /home/${{ secrets.EC2_USER }}/saykotoba-backend/config/nginx.conf
                  # Nginx 설정 리로드
                  docker-compose exec -T nginx nginx -s reload
                  echo "5. 트래픽 전환 완료: GREEN -> BLUE"
                  
                  # 트래픽 전환 성공 후 이전 환경(Green) 컨테이너 정지
                  echo "6. 이전 Green 컨테이너 정지"
                  docker-compose stop api-green
                  echo "7. Green-Blue 전환 완료"
                else
                  echo "Blue 컨테이너 Health Check 실패! 트래픽 전환 취소, 배포 중단"
                  # 롤백 - 실패한 컨테이너 중지
                  docker-compose stop api-blue
                  exit 1
                fi
              fi
            '
          else
            # 개발 서버 배포
            ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
              export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
              cd /home/${{ secrets.EC2_USER }}/saykotoba-backend
              echo "=== DEV 서버 배포 ==="
              echo "1. 개발 서버 이미지 업데이트"
              docker pull '${{ secrets.DOCKERHUB_USERNAME }}'/saykotoba-backend:dev
              echo "2. 개발 서버 컨테이너 제거 및 재생성"
              docker-compose rm -sf api-dev
              docker-compose up -d --force-recreate api-dev
            '
          fi

          # 시스템 정리 작업 (모든 배포 후 실행)
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            echo "=== 시스템 리소스 정리 ==="
            echo "1. 사용하지 않는 Docker 리소스 정리"
            docker system prune -f --volumes
            echo "2. 태그 없는 이미지 정리"
            docker image prune -f
            echo "3. 시스템 메모리 상태 확인"
            free -h
          '
      - name: Check deployment status
        if: always()
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "EC2 서버의 컨테이너 상태 확인"
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            if [[ "$BRANCH_NAME" == "main" ]]; then
              echo "프로덕션 서버 상태 확인"
              docker ps | grep "api-"
            else
              echo "개발 서버 상태 확인"
              docker ps | grep "api-dev"
            fi
          '
      - name: Check Docker status
        if: always()
        run: |
          ssh -q ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "===== Docker 컨테이너 상태 ====="
            docker ps
            echo "===== Docker 시스템 정보 ====="
            docker system df
          EOF
      - name: Notify deployment result
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: |
            환경: ${{ github.ref == 'refs/heads/main' && '프로덕션' || '개발' }}
            배포 결과: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
